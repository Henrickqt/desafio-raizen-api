// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenWeather.Infra.Data;

#nullable disable

namespace OpenWeather.Infra.Data.Migrations
{
    [DbContext(typeof(OpenWeatherContext))]
    [Migration("20240608062645_WeatherForecastDate")]
    partial class WeatherForecastDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OpenWeather.Domain.Entities.Daily", b =>
                {
                    b.Property<int>("DailyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyId"), 1L, 1);

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<decimal>("Precipitation")
                        .HasColumnType("decimal(12,5)");

                    b.Property<decimal>("TemperatureMax")
                        .HasColumnType("decimal(12,5)");

                    b.Property<decimal>("TemperatureMin")
                        .HasColumnType("decimal(12,5)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<int>("WeatherForecastId")
                        .HasColumnType("int");

                    b.Property<decimal>("WindSpeed")
                        .HasColumnType("decimal(12,5)");

                    b.HasKey("DailyId");

                    b.HasIndex("WeatherForecastId");

                    b.ToTable("Daily", (string)null);
                });

            modelBuilder.Entity("OpenWeather.Domain.Entities.DailyWeather", b =>
                {
                    b.Property<int>("DailyWeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyWeatherId"), 1L, 1);

                    b.Property<int>("DailyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Main")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DailyWeatherId");

                    b.HasIndex("DailyId");

                    b.ToTable("DailyWeather", (string)null);
                });

            modelBuilder.Entity("OpenWeather.Domain.Entities.Hourly", b =>
                {
                    b.Property<int>("HourlyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HourlyId"), 1L, 1);

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<decimal>("Precipitation")
                        .HasColumnType("decimal(12,5)");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(12,5)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<int>("WeatherForecastId")
                        .HasColumnType("int");

                    b.Property<decimal>("WindSpeed")
                        .HasColumnType("decimal(12,5)");

                    b.HasKey("HourlyId");

                    b.HasIndex("WeatherForecastId");

                    b.ToTable("Hourly", (string)null);
                });

            modelBuilder.Entity("OpenWeather.Domain.Entities.HourlyWeather", b =>
                {
                    b.Property<int>("HourlyWeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HourlyWeatherId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("HourlyId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Main")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("HourlyWeatherId");

                    b.HasIndex("HourlyId");

                    b.ToTable("HourlyWeather", (string)null);
                });

            modelBuilder.Entity("OpenWeather.Domain.Entities.WeatherForecast", b =>
                {
                    b.Property<int>("WeatherForecastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeatherForecastId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(12,7)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(12,7)");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TimezoneOffset")
                        .HasColumnType("int");

                    b.HasKey("WeatherForecastId");

                    b.ToTable("WeatherForecast", (string)null);
                });

            modelBuilder.Entity("OpenWeather.Domain.Entities.Daily", b =>
                {
                    b.HasOne("OpenWeather.Domain.Entities.WeatherForecast", "WeatherForecast")
                        .WithMany("Dailies")
                        .HasForeignKey("WeatherForecastId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WeatherForecast");
                });

            modelBuilder.Entity("OpenWeather.Domain.Entities.DailyWeather", b =>
                {
                    b.HasOne("OpenWeather.Domain.Entities.Daily", "Daily")
                        .WithMany("DailyWeathers")
                        .HasForeignKey("DailyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Daily");
                });

            modelBuilder.Entity("OpenWeather.Domain.Entities.Hourly", b =>
                {
                    b.HasOne("OpenWeather.Domain.Entities.WeatherForecast", "WeatherForecast")
                        .WithMany("Hourlies")
                        .HasForeignKey("WeatherForecastId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WeatherForecast");
                });

            modelBuilder.Entity("OpenWeather.Domain.Entities.HourlyWeather", b =>
                {
                    b.HasOne("OpenWeather.Domain.Entities.Hourly", "Hourly")
                        .WithMany("HourlyWeathers")
                        .HasForeignKey("HourlyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hourly");
                });

            modelBuilder.Entity("OpenWeather.Domain.Entities.Daily", b =>
                {
                    b.Navigation("DailyWeathers");
                });

            modelBuilder.Entity("OpenWeather.Domain.Entities.Hourly", b =>
                {
                    b.Navigation("HourlyWeathers");
                });

            modelBuilder.Entity("OpenWeather.Domain.Entities.WeatherForecast", b =>
                {
                    b.Navigation("Dailies");

                    b.Navigation("Hourlies");
                });
#pragma warning restore 612, 618
        }
    }
}
